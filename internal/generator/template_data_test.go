package generator

import (
	"testing"
)

func TestTemplateDataInitialization(t *testing.T) {
	// Mock values for initialization
	mockData := TemplateData{
		TemplatesDir:  "/path/to/templates",
		ActionsDir:    "/path/to/actions",
		GoModule:      "github.com/example/project",
		GoPackage:     "components",
		ComponentName: "Button",
		VariantName:   "Primary",
		AssetsDir:     "/path/to/assets",
		WithJs:        true,
		CssLayer:      "base",
		GuardMarker:   "// AUTOGENERATED CODE",
		WatermarkTip:  true,
		DryRun:        false,
	}

	// Define test cases for each field
	tests := []struct {
		name     string
		got      any
		expected any
	}{
		{"TemplatesDir", mockData.TemplatesDir, "/path/to/templates"},
		{"ActionsDir", mockData.ActionsDir, "/path/to/actions"},
		{"GoModule", mockData.GoModule, "github.com/example/project"},
		{"GoPackage", mockData.GoPackage, "components"},
		{"ComponentName", mockData.ComponentName, "Button"},
		{"VariantName", mockData.VariantName, "Primary"},
		{"AssetsDir", mockData.AssetsDir, "/path/to/assets"},
		{"WithJs", mockData.WithJs, true},
		{"CssLayer", mockData.CssLayer, "base"},
		{"GuardMarker", mockData.GuardMarker, "// AUTOGENERATED CODE"},
		{"WatermarkTip", mockData.WatermarkTip, true},
		{"DryRun", mockData.DryRun, false},
	}

	// Iterate through each test case
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			if tt.got != tt.expected {
				t.Errorf("Expected %s to be %v, got %v", tt.name, tt.expected, tt.got)
			}
		})
	}
}

func TestTemplateDataIndependence(t *testing.T) {
	data1 := TemplateData{ComponentName: "Button"}
	data2 := TemplateData{ComponentName: "Card"}

	data1.ComponentName = "UpdatedButton"

	if data1.ComponentName == data2.ComponentName {
		t.Errorf("Expected different values for ComponentName, but they are the same")
	}
}

func TestTemplateDataBooleanFlags(t *testing.T) {
	data := TemplateData{}

	// Default values should be false
	if data.WithJs {
		t.Errorf("Expected WithJs to be false by default, got true")
	}
	if data.WatermarkTip {
		t.Errorf("Expected WatermarkTip to be false by default, got true")
	}
	if data.DryRun {
		t.Errorf("Expected DryRun to be false by default, got true")
	}

	// Set values and recheck
	data.WithJs = true
	data.WatermarkTip = true
	data.DryRun = true

	if !data.WithJs {
		t.Errorf("Expected WithJs to be true, got false")
	}
	if !data.WatermarkTip {
		t.Errorf("Expected WatermarkTip to be true, got false")
	}
	if !data.DryRun {
		t.Errorf("Expected DryRun to be true, got false")
	}
}
