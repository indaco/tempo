package cleancmd

import (
	"context"
	"os"

	"github.com/indaco/tempo/internal/app"
	"github.com/indaco/tempo/internal/errors"
	"github.com/indaco/tempo/internal/helpers"
	"github.com/indaco/tempo/internal/utils"
	"github.com/urfave/cli/v3"
)

/* ------------------------------------------------------------------------- */
/* Command Setup                                                             */
/* ------------------------------------------------------------------------- */

// SetupCleanCommand creates the CLI command to remove the .tempo-lastrun file.
func SetupCleanCommand(cmdCtx *app.AppContext) *cli.Command {
	const filePath = ".tempo-lastrun"

	return &cli.Command{
		Name:        "clean",
		Description: "Remove temporary metadata generated by tempo run",
		Action: func(ctx context.Context, cmd *cli.Command) error {
			helpers.EnableLoggerIndentation(cmdCtx.Logger)

			// Step 1: Check if the file exists using FileOrDirExists
			exists, isDir, err := utils.FileOrDirExists(filePath)
			if err != nil {
				return errors.Wrap("Failed to check path", err)
			}
			if isDir {
				return errors.Wrap(filePath, "exists but is a directory, not a file")
			}
			if exists {
				// File exists, attempt to remove it
				if err := os.Remove(filePath); err != nil {
					return errors.Wrap("Failed to remove", err, filePath)
				}
				cmdCtx.Logger.Success("Successfully removed", filePath)
			} else {
				// File does not exist, no action needed
				cmdCtx.Logger.Info("File does not exist, nothing to clean").
					WithAttrs("file", filePath)
			}
			helpers.ResetLogger(cmdCtx.Logger)

			return nil
		},
	}
}
